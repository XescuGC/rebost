// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/rebost/replica (interfaces: Node)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	replica "github.com/xescugc/rebost/replica"
	reflect "reflect"
)

// ReplicaNode is a mock of Node interface
type ReplicaNode struct {
	ctrl     *gomock.Controller
	recorder *ReplicaNodeMockRecorder
}

// ReplicaNodeMockRecorder is the mock recorder for ReplicaNode
type ReplicaNodeMockRecorder struct {
	mock *ReplicaNode
}

// NewReplicaNode creates a new mock instance
func NewReplicaNode(ctrl *gomock.Controller) *ReplicaNode {
	mock := &ReplicaNode{ctrl: ctrl}
	mock.recorder = &ReplicaNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ReplicaNode) EXPECT() *ReplicaNodeMockRecorder {
	return m.recorder
}

// CreateReplicaPendent mocks base method
func (m *ReplicaNode) CreateReplicaPendent(arg0 context.Context, arg1 replica.Pendent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicaPendent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReplicaPendent indicates an expected call of CreateReplicaPendent
func (mr *ReplicaNodeMockRecorder) CreateReplicaPendent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicaPendent", reflect.TypeOf((*ReplicaNode)(nil).CreateReplicaPendent), arg0, arg1)
}

// HasReplicaPendent mocks base method
func (m *ReplicaNode) HasReplicaPendent(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasReplicaPendent", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasReplicaPendent indicates an expected call of HasReplicaPendent
func (mr *ReplicaNodeMockRecorder) HasReplicaPendent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasReplicaPendent", reflect.TypeOf((*ReplicaNode)(nil).HasReplicaPendent), arg0, arg1)
}
