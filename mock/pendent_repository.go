// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/rebost/replica (interfaces: PendentRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	replica "github.com/xescugc/rebost/replica"
	reflect "reflect"
)

// ReplicaPendentRepository is a mock of PendentRepository interface
type ReplicaPendentRepository struct {
	ctrl     *gomock.Controller
	recorder *ReplicaPendentRepositoryMockRecorder
}

// ReplicaPendentRepositoryMockRecorder is the mock recorder for ReplicaPendentRepository
type ReplicaPendentRepositoryMockRecorder struct {
	mock *ReplicaPendentRepository
}

// NewReplicaPendentRepository creates a new mock instance
func NewReplicaPendentRepository(ctrl *gomock.Controller) *ReplicaPendentRepository {
	mock := &ReplicaPendentRepository{ctrl: ctrl}
	mock.recorder = &ReplicaPendentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ReplicaPendentRepository) EXPECT() *ReplicaPendentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *ReplicaPendentRepository) Create(arg0 context.Context, arg1 *replica.Pendent) error {
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *ReplicaPendentRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ReplicaPendentRepository)(nil).Create), arg0, arg1)
}
