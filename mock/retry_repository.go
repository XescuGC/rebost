// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/rebost/replica (interfaces: RetryRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	replica "github.com/xescugc/rebost/replica"
	reflect "reflect"
)

// ReplicaRetryRepository is a mock of RetryRepository interface
type ReplicaRetryRepository struct {
	ctrl     *gomock.Controller
	recorder *ReplicaRetryRepositoryMockRecorder
}

// ReplicaRetryRepositoryMockRecorder is the mock recorder for ReplicaRetryRepository
type ReplicaRetryRepositoryMockRecorder struct {
	mock *ReplicaRetryRepository
}

// NewReplicaRetryRepository creates a new mock instance
func NewReplicaRetryRepository(ctrl *gomock.Controller) *ReplicaRetryRepository {
	mock := &ReplicaRetryRepository{ctrl: ctrl}
	mock.recorder = &ReplicaRetryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ReplicaRetryRepository) EXPECT() *ReplicaRetryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *ReplicaRetryRepository) Create(arg0 context.Context, arg1 *replica.Retry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *ReplicaRetryRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ReplicaRetryRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *ReplicaRetryRepository) Delete(arg0 context.Context, arg1 *replica.Retry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *ReplicaRetryRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ReplicaRetryRepository)(nil).Delete), arg0, arg1)
}

// First mocks base method
func (m *ReplicaRetryRepository) First(arg0 context.Context) (*replica.Retry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", arg0)
	ret0, _ := ret[0].(*replica.Retry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First
func (mr *ReplicaRetryRepositoryMockRecorder) First(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*ReplicaRetryRepository)(nil).First), arg0)
}
